<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mateus Kern</title><link>https://mateuskern.com/</link><description></description><atom:link href="https://mateuskern.com/feeds/mateus-kern.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 30 Apr 2015 00:00:00 -0300</lastBuildDate><item><title>My solution to Docker on OS X</title><link>https://mateuskern.com/my-solution-to-docker-on-os-x.html</link><description>&lt;p&gt;&lt;cite&gt;Note: Through the post I use a VM on my local machine on VMware Fusion but
you can you use barebone server, a VPS/Cloud Server somewhere or other
hypervisor. Just read the CoreOS documentation on how to get the OS running on
your pariculary setup.&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;I wanted to use Docker on a VM, but not deal with the hassle of editing/coping
my Dockerfiles to the VM. I could use docker2boot, but it uses VirtualBox and
I don't like it, so I did it &lt;a class="reference external" href="https://www.youtube.com/watch?v=3Z-jnXwpuRo"&gt;my
way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do that, download the CoreOS &lt;a class="reference external" href="https://coreos.com/docs/running-coreos/platforms/vmware/"&gt;stable image for the VMware
plataform&lt;/a&gt;.,
unzip it and put the &lt;code&gt;.vmdk&lt;/code&gt; and &lt;code&gt;.vmx&lt;/code&gt; on a directory named
&lt;cite&gt;docker.vmware&lt;/cite&gt; (just to get a proper icon) and rename both files to coreos
(but keep the extensions). And don't throw away the
&lt;code&gt;insecure_ssh_key&lt;/code&gt; file yet.&lt;/p&gt;
&lt;p&gt;The default image comes set with 1024 MB of RAM and 1 cpu core if you want
more, just set the options &lt;code&gt;memsize&lt;/code&gt; and &lt;code&gt;numvcpus&lt;/code&gt; inside the
&lt;cite&gt;.vmx&lt;/cite&gt; file to your needs, I set the memory to &lt;cite&gt;4096&lt;/cite&gt; (just in case) and the
CPUs core to &lt;cite&gt;2&lt;/cite&gt;. Or you can open the VM with the GUI interface and change
there.&lt;/p&gt;
&lt;p&gt;After that boot the VM and add your ssh key and remove the insecure one,
to get the IP of the machine just press the enter key on the VM window.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cat ~/.ssh/id_rsa.pub &lt;span class="p"&gt;|&lt;/span&gt; ssh core&amp;#64;10.0.1.81 -i /path/to/insecure_ssh_key &lt;span class="se"&gt;\
&lt;/span&gt;update-ssh-keys -a user
ssh core&amp;#64;10.0.1.81 update-ssh-keys -D oem
&lt;/pre&gt;
&lt;p&gt;Then generate the keys to be able to communicate with the server. Just answer
the questions and use strong passwords, but remember that the certificate
accepts only passwords up to 20 characters.
Use * to the FQDN field if you don't have a domain set to the VM.
You also can use any domain you like and set it you the IP of the VM on your
/etc/hosts.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# Create some directories to keep everything organized.
&lt;/span&gt;mkdir -p certs/&lt;span class="o"&gt;{&lt;/span&gt;client,server&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;certs
&lt;span class="c"&gt;# Generate the CA
&lt;/span&gt;openssl genrsa -des3 -out ca-key.pem
openssl req -new -x509 -days &lt;span class="m"&gt;3650&lt;/span&gt; -key ca-key.pem -out ca.pem
&lt;span class="c"&gt;# Generate the Server certificate and key.
&lt;/span&gt;openssl genrsa -des3 -out server/key.pem
openssl req -new -key server/key.pem -out server/server.csr
openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in server/server.csr -CA ca.pem &lt;span class="se"&gt;\
&lt;/span&gt;    -CAKey ca-key.pem -CAcreateserial -out server/cert.pem

&lt;span class="c"&gt;# Generate the Client certificate and key.
&lt;/span&gt;openssl genrsa -des3 -out client/key.pem
openssl req -new -key client/key.pem -out client/client.csr
cho &lt;span class="nv"&gt;extendedKeyUsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; clientAuth &amp;gt; extfile.cnf
openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in client/client.csr -CA ca.key -CAkey &lt;span class="se"&gt;\
&lt;/span&gt;    ca-key.pem -CAcreateserial -out client/cert.pem -extfile extfile.cnf

&lt;span class="c"&gt;# Remove the passwords of the keys, so we don't need to enter it every
# time the VM boots.
&lt;/span&gt;openssl rsa -in server/key.pem -out server-key.pem
openssl rsa -in client/key.pem -out client-key.pem

&lt;span class="c"&gt;# Zip the files that the docker daemon needs.
&lt;/span&gt;zip docker.zip ca.pem server-key.pem server/server-cert.pem
&lt;/pre&gt;
&lt;p&gt;Because I am &lt;a class="reference external" href="http://www.thegeekstuff.com/2011/07/lazy-sysadmin/"&gt;lazy&lt;/a&gt;, I
created a &lt;a class="reference external" href="https://github.com/k3rn/ansible-coreos"&gt;Ansible playbook&lt;/a&gt;, so I
don't need do configure it the next time I deploy a CoreOS VM.&lt;/p&gt;
&lt;p&gt;If you don't want to/do not know how to use Ansible - you should learn it,
because it's awesome - you have to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stop and disable the Docker service:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
systemctl stop docker
systemctl disable docker
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create the file &lt;code&gt;/etc/systemd/system/docker.service&lt;/code&gt; with the following content:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.io

[Service]
ExecStartPre=/bin/mount --make-rprivate /
# Run docker but don't have docker automatically restart
# containers. This is a job for systemd and unit files.
ExecStart=/usr/bin/docker -d --tlsverify --tlscacert=/var/ssl/ca.pem
--tlscert=/var/ssl/server-cert.pem --tlskey=/var/ssl/server-key.pem -H fd://
-H 0.0.0.0:4243

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upload the the zip file and unpack it's content to &lt;code&gt;/var/ssl/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start and enable the docker service:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
systemctl start docker
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;docker
&lt;/pre&gt;
&lt;p&gt;To configure the client, you need to install the same of version of Docker
that your CoreOS is running, at the time I am writing this the CoreOS
stable version is 633.1.0 and ships with Docker 1.5, but the most recent
version of Docker is 1.5. To install this the version 1.5 of Docker on OS X
you can use homebrew[link]:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
brew tap homebrew/versions
brew install docker150
&lt;/pre&gt;
&lt;p&gt;Copy the client certificate and key and CA cert to &lt;cite&gt;~/.docker/&lt;/cite&gt;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
cp ca.pem ~/.docker/ca.pem
cp client/cert.pem ~/.docker/cert.pem
cp cleint-key.pem ~/.docker.pem
&lt;/pre&gt;
&lt;p&gt;Set DOCKER_HOST enviroment variable to your VM and add it to your shell
configuration file:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# For bourne shell compatible shells use:
&lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://your.coreos.host:4243

&lt;span class="c"&gt;# For the Fish shell use:
&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -x DOCKER_HOST &lt;span class="s1"&gt;'tcp://oyur.coreos.host:4243'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now you car run the following command to see if everything works:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
docker --tlsverify info
&lt;/pre&gt;
&lt;p&gt;It can be annoying to run every command with the flag &lt;code&gt;--tlsverify&lt;/code&gt;, you
can add an alias to your shell config file:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# For bourne shell compatible shells use:
&lt;/span&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;docker --tlsverify

&lt;span class="c"&gt;# For the fish shell:
&lt;/span&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;docker &lt;span class="s2"&gt;&amp;quot;docker --tlsverify&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="http://blog.jameskyle.org/2014/04/coreos-docker-remote-api-tls/"&gt;Configuring Docker Remote API with TLS on CoreOS&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mateus Kern</dc:creator><pubDate>Thu, 30 Apr 2015 00:00:00 -0300</pubDate><guid>tag:mateuskern.com,2015-04-30:my-solution-to-docker-on-os-x.html</guid><category>docker</category><category>osx</category><category>vmware fusion</category><category>containers</category><category>sysadmin</category><category>coreos</category><category>linux</category></item><item><title>Create your personal wiki with Simiki</title><link>https://mateuskern.com/personal-wiki.html</link><description>&lt;p&gt;I wanted to create a wiki to document my research/studyings/experiments for
future refereces and share it with the internet.&lt;/p&gt;
&lt;p&gt;My requeriments for the software that would 'run' the wiki was that it has to
be simple - no access control, no database, no version history on the page and
one file configuration -, generate static html and with active develoment.
Simiki fill all this requirments and with a bonus: It's written in python!&lt;/p&gt;
&lt;p&gt;So lets create the wiki:&lt;/p&gt;
&lt;p&gt;Install simiki it's as simple as:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
pip install simiki &lt;span class="c"&gt;# add sudo to the begining if you do not use virtualenv&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To create the wiki, you simple run the command above on the path that the files
will live:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
simiki init
&lt;/pre&gt;
&lt;p&gt;It will copy a few sample files to your current path, the configuration file:
&lt;em&gt;_config.yml&lt;/em&gt;, a sample page: &lt;em&gt;content/intro/gettingstarted.md&lt;/em&gt;, a fabric file:
&lt;em&gt;fabfile.py&lt;/em&gt; to easy generate/preview/deploy the site and the &lt;em&gt;theme&lt;/em&gt; folder
where the templates lives.&lt;/p&gt;
&lt;p&gt;Beside the options already in the configuration file, one worth mentiong is
the root one, that allows you to change the root folder, eg: you would like to
host your wiki on the url: example.com/wiki, you simple change the &lt;em&gt;root&lt;/em&gt; option to:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;root&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/wiki&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To create pages is simple as running the following command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
simiki new -t &lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt; -c category
&lt;/pre&gt;
&lt;p&gt;Or just create a file folowing this path: &lt;em&gt;content/$category/filname.md:&lt;/em&gt;, and
add the title and date to file, following this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
-------
titile: &amp;quot;Title&amp;quot;
date: 2014-12-31 00:00
-------
&lt;/pre&gt;
&lt;p&gt;I also modified the fabric file to add a function that auto-regenerate the html
if any modification happens on the &lt;em&gt;content/&lt;/em&gt; folder, so I will always have a
local version, that will be served by apache and just a cronjob is need to
push the changes to the public wiki.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.observers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;watchdog.events&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileSystemEventHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_modified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;l&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;event_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'content/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;observer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mateus Kern</dc:creator><pubDate>Thu, 30 Dec 2010 00:00:00 -0200</pubDate><guid>tag:mateuskern.com,2010-12-30:personal-wiki.html</guid></item></channel></rss>