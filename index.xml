<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mateus Kern</title>
    <link>https://mateuskern.com/</link>
    <description>Recent content on Mateus Kern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 09 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mateuskern.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>https://mateuskern.com/page/about.html</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mateuskern.com/page/about.html</guid>
      <description>

&lt;p&gt;Hello, I&amp;rsquo;m Kern curently I live in southern Brazil. I have interest in
science fiction, right to privacy, security, freedom of information,
international affairs, history, &lt;a href=&#34;https://last.fm/user/kernnerd&#34;&gt;music&lt;/a&gt;,
&lt;a href=&#34;http://www.tvshowtime.com/kern&#34;&gt;television shows&lt;/a&gt;, astronomy, space
exploration, warfare and woodworking.&lt;/p&gt;

&lt;h2 id=&#34;professional:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Professional&lt;/h2&gt;

&lt;p&gt;I like planning, implementing and maintaining systems architecture with
the help of tools that provide automation, monitoring and metrics. And
building backend software, preferably with python.&lt;/p&gt;

&lt;p&gt;If you have interest in hiring me, please see this &lt;a href=&#34;https://mateuskern.com/pages/hire-me.html&#34;&gt;page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://mateuskern.com/page/contact.html</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mateuskern.com/page/contact.html</guid>
      <description>&lt;p&gt;You can contact me through my email (&lt;a href=&#34;mailto:kern@mateuskern.com&#34;&gt;kern@mateuskern.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Sometimes I am at Freenode/OFTC with the kern username.&lt;/p&gt;

&lt;p&gt;My gpg key is available
&lt;a href=&#34;http://pgp.mit.edu:11371/pks/lookup?op=get&amp;amp;search=0xD13DF6B1E0A6AB42&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you prefer to call, you can contact me at +55 (51) 9793-8559.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hire me</title>
      <link>https://mateuskern.com/page/hire.html</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mateuskern.com/page/hire.html</guid>
      <description>&lt;p&gt;Hello, my name is Mateus Kern and I am passionate about Unix-like system
and I am looking for an entry level position (preferably remote), as
System Administrator.&lt;/p&gt;

&lt;p&gt;I have a good knowledge of Linux based operating system - specially the
Debian family -, scripting with bourne shell (sh) and python, nginx
webserver, and configuration management with Ansible. Also, I have
knowledge in the netfilter framework.&lt;/p&gt;

&lt;p&gt;Curently I&amp;rsquo;m studying Django and docker.&lt;/p&gt;

&lt;p&gt;I have example of my coding at &lt;a href=&#34;https://github.com/k3rn&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in hiring me, please &lt;a href=&#34;mailto:kern@mateuskern.com&#34;&gt;send me a
email&lt;/a&gt; or contact me through the number +55
(51) 9793-8559.&lt;/p&gt;

&lt;p&gt;You can download my resume
&lt;a href=&#34;https://mateuskern.com/mateuskern-resume.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My solution to Docker on OS X</title>
      <link>https://mateuskern.com/post/docker.html</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mateuskern.com/post/docker.html</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is outdated and I will update it in the near future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: Through the post I use a VM on my local machine on VMware Fusion but
you can you use barebone server, a VPS/Cloud Server somewhere or other
hypervisor. Just read the CoreOS documentation on how to get the OS running on
your pariculary setup.&lt;/p&gt;

&lt;p&gt;I wanted to use Docker on a VM, but not deal with the hassle of
editing/coping my Dockerfiles to the VM. I could use docker2boot, but it
uses VirtualBox and I don&amp;rsquo;t like it, so I did it &lt;a href=&#34;https://www.youtube.com/watch?v=3Z-jnXwpuRo&#34;&gt;my
way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do that, download the CoreOS &lt;a href=&#34;https://coreos.com/docs/running-coreos/platforms/vmware/&#34;&gt;stable image for the VMware
plataform&lt;/a&gt;.,
unzip it and put the &lt;code&gt;.vmdk&lt;/code&gt; and &lt;code&gt;.vmx&lt;/code&gt; on a directory named docker.vmware
(just to get a proper icon) and rename both files to coreos (but keep the
extensions). And don&amp;rsquo;t throw away the &lt;code&gt;insecure_ssh_key&lt;/code&gt; file yet.&lt;/p&gt;

&lt;p&gt;The default image comes set with 1024 MB of RAM and 1 cpu core if you
want more, just set the options &lt;code&gt;memsize&lt;/code&gt; and &lt;code&gt;numvcpus&lt;/code&gt; inside the .vmx file
to your needs, I set the memory to 4096 (just in case) and the CPUs core to 2.
Or you can open the VM with the GUI interface and change there.&lt;/p&gt;

&lt;p&gt;After that boot the VM and add your ssh key and remove the insecure one,
to get the IP of the machine just press the enter key on the VM window.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	cat ~/.ssh/id_rsa.pub &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh core@10.0.1.81 -i /path/to/insecure_ssh_key &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
	update-ssh-keys -a user
	ssh core@10.0.1.81 update-ssh-keys -D oem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then generate the keys to be able to communicate with the server. Just
answer the questions and use strong passwords, but remember that the
certificate accepts only passwords up to 20 characters. Use * to the
FQDN field if you don&amp;rsquo;t have a domain set to the VM. You also can use
any domain you like and set it you the IP of the VM on your /etc/hosts.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	&lt;span class=&#34;c&#34;&gt;# Create some directories to keep everything organized.&lt;/span&gt;
	mkdir -p certs/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;client,server&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd &lt;/span&gt;certs
	&lt;span class=&#34;c&#34;&gt;# Generate the CA&lt;/span&gt;
	openssl genrsa -des3 -out ca-key.pem
	openssl req -new -x509 -days &lt;span class=&#34;m&#34;&gt;3650&lt;/span&gt; -key ca-key.pem -out ca.pem
	&lt;span class=&#34;c&#34;&gt;# Generate the Server certificate and key.&lt;/span&gt;
	openssl genrsa -des3 -out server/key.pem
	openssl req -new -key server/key.pem -out server/server.csr
	openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -in server/server.csr -CA ca.pem &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
		-CAKey ca-key.pem -CAcreateserial -out server/cert.pem

	&lt;span class=&#34;c&#34;&gt;# Generate the Client certificate and key.&lt;/span&gt;
	openssl genrsa -des3 -out client/key.pem
	openssl req -new -key client/key.pem -out client/client.csr
	cho &lt;span class=&#34;nv&#34;&gt;extendedKeyUsage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; clientAuth &amp;gt; extfile.cnf
	openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;365&lt;/span&gt; -in client/client.csr -CA ca.key -CAkey &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
		ca-key.pem -CAcreateserial -out client/cert.pem -extfile extfile.cnf

	&lt;span class=&#34;c&#34;&gt;# Remove the passwords of the keys, so we don&amp;#39;t need to enter it every&lt;/span&gt;
	&lt;span class=&#34;c&#34;&gt;# time the VM boots.&lt;/span&gt;
	openssl rsa -in server/key.pem -out server-key.pem
	openssl rsa -in client/key.pem -out client-key.pem

	&lt;span class=&#34;c&#34;&gt;# Zip the files that the docker daemon needs.&lt;/span&gt;
	zip docker.zip ca.pem server-key.pem server/server-cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because I am &lt;a href=&#34;http://www.thegeekstuff.com/2011/07/lazy-sysadmin/&#34;&gt;lazy&lt;/a&gt;,
I created a &lt;a href=&#34;https://github.com/k3rn/ansible-coreos&#34;&gt;Ansible playbook&lt;/a&gt;,
so I don&amp;rsquo;t need do configure it the next time I deploy a CoreOS VM.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to/do not know how to use Ansible - you should learn
it, because it&amp;rsquo;s awesome - you have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stop and disable the Docker service:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	systemctl stop docker
	systemctl disable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the file &lt;code&gt;/etc/systemd/system/docker.service&lt;/code&gt; with the following
content:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Unit&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;Description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Docker Application Container Engine
	&lt;span class=&#34;nv&#34;&gt;Documentation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://docs.docker.io

	&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Service&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/bin/mount --make-rprivate /
	&lt;span class=&#34;c&#34;&gt;# Run docker but don&amp;#39;t have docker automatically restart&lt;/span&gt;
	&lt;span class=&#34;c&#34;&gt;# containers. This is a job for systemd and unit files.&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/docker -d --tlsverify --tlscacert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/ssl/ca.pem
	--tlscert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/ssl/server-cert.pem --tlskey&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/var/ssl/server-key.pem -H fd://
	-H 0.0.0.0:4243

	&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Install&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;WantedBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload the the zip file and unpack it&amp;rsquo;s content to &lt;code&gt;/var/ssl/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start and enable the docker service:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	systemctl start docker
	systemctl &lt;span class=&#34;nb&#34;&gt;enable &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To configure the client, you need to install the same of version of
Docker that your CoreOS is running, at the time I am writing this the
CoreOS stable version is 633.1.0 and ships with Docker 1.5, but the most
recent version of Docker is 1.5. To install this the version 1.5 of
Docker on OS X you can use homebrew[link]:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	brew tap homebrew/versions
	brew install docker150
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Copy the client certificate and key and CA cert to ~/.docker/&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	cp ca.pem ~/.docker/ca.pem
	cp client/cert.pem ~/.docker/cert.pem
	cp client-key.pem ~/.docker.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Set DOCKER_HOST enviroment variable to your VM and add it to your shell
configuration file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	&lt;span class=&#34;c&#34;&gt;# For bourne shell compatible shells use:&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_HOST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;tcp://your.coreos.host:4243

	&lt;span class=&#34;c&#34;&gt;# For the Fish shell use:&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -x DOCKER_HOST &lt;span class=&#34;s1&#34;&gt;&amp;#39;tcp://your.coreos.host:4243&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now you car run the following command to see if everything works:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	docker --tlsverify info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It can be annoying to run every command with the flag
&lt;code&gt;--tlsverify&lt;/code&gt;, you can add an alias to your shell config file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;	&lt;span class=&#34;c&#34;&gt;# For bourne shell compatible shells use:&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker --tlsverify

	&lt;span class=&#34;c&#34;&gt;# For the fish shell:&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;docker &lt;span class=&#34;s2&#34;&gt;&amp;quot;docker --tlsverify&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://blog.jameskyle.org/2014/04/coreos-docker-remote-api-tls/&#34;&gt;Configuring Docker Remote API with TLS on
CoreOS&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create your personal wiki with Simiki</title>
      <link>https://mateuskern.com/post/simiki.html</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mateuskern.com/post/simiki.html</guid>
      <description>&lt;p&gt;I wanted to create a wiki to document my research/studyings/experiments
for future refereces and share it with the internet.&lt;/p&gt;

&lt;p&gt;My requeriments for the software that would &amp;lsquo;run&amp;rsquo; the wiki was that it
has to be simple - no access control, no database, no version history on
the page and one file configuration -, generate static html and with
active develoment. Simiki fill all this requirments and with a bonus:
It&amp;rsquo;s written in python!&lt;/p&gt;

&lt;p&gt;So lets create the wiki:&lt;/p&gt;

&lt;p&gt;Install simiki it&amp;rsquo;s as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;pip install simiki # add sudo to the begining if you do not use virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the wiki, you simple run the command above on the path that
the files will live:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;simiki init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will copy a few sample files to your current path, the configuration
file: &lt;em&gt;_config.yml&lt;/em&gt;, a sample page: &lt;em&gt;content/intro/gettingstarted.md&lt;/em&gt;,
a fabric file: &lt;em&gt;fabfile.py&lt;/em&gt; to easy generate/preview/deploy the site and
the &lt;em&gt;theme&lt;/em&gt; folder where the templates lives.&lt;/p&gt;

&lt;p&gt;Beside the options already in the configuration file, one worth mentiong
is the root one, that allows you to change the root folder, eg: you
would like to host your wiki on the url: example.com/wiki, you simple
change the &lt;em&gt;root&lt;/em&gt; option to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;root: /wiki
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create pages is simple as running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;simiki new -t &amp;quot;Title&amp;quot; -c category
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just create a file folowing this path:
&lt;em&gt;content/\$category/filname.md:&lt;/em&gt;, and add the title and date to file,
following this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode&#34;&gt;-------
titile: &amp;quot;Title&amp;quot;
date: 2014-12-31 00:00
-------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also modified the fabric file to add a function that auto-regenerate
the html if any modification happens on the &lt;em&gt;content/&lt;/em&gt; folder, so I will
always have a local version, that will be served by apache and just a
cronjob is need to push the changes to the public wiki.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class Handler(FileSystemEventHandler):
    def on_modified(self, event):
        g()


def l():
    event_handler = Handler()
    observer = Observer()
    observer.schedule(event_handler, path=&#39;content/&#39;, recursive=True)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        observer.stop()
    observer.join()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>